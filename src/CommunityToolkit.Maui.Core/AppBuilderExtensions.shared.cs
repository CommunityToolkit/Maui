#if ANDROID
using CommunityToolkit.Maui.Core.Services;
#endif
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Maui.LifecycleEvents;
using Microsoft.Maui.Platform;

namespace CommunityToolkit.Maui.Core;

/// <summary>
/// <see cref="MauiAppBuilder"/> Extensions
/// </summary>
public static class AppBuilderExtensions
{
	/// <summary>
	/// Initializes the .NET MAUI Community Toolkit Core Library
	/// </summary>
	/// <param name="builder"><see cref="MauiAppBuilder"/> generated by <see cref="MauiApp"/> </param>
	/// <param name="options"><see cref="Options"/></param>
	/// <returns><see cref="MauiAppBuilder"/> initialized for <see cref="CommunityToolkit.Maui.Core"/></returns>
	public static MauiAppBuilder UseMauiCommunityToolkitCore(this MauiAppBuilder builder, Action<Options>? options = default)
	{
		options?.Invoke(new Options());
#if ANDROID
		builder.Services.AddSingleton<IDialogFragmentService, DialogFragmentService>();

		builder.ConfigureLifecycleEvents(builder =>
		{
			builder.AddAndroid(androidBuilder =>
			{
				androidBuilder.OnCreate((activity, bundle) =>
				{
					if (activity is not AndroidX.AppCompat.App.AppCompatActivity componentActivity)
					{
						return;
					}

					componentActivity.GetFragmentManager()?.RegisterFragmentLifecycleCallbacks(new MCTFragmentLifecycle(), false);
				});
			});
		});
#endif
		return builder;
	}
}