using System.Windows.Input;

namespace CommunityToolkit.Maui.Behaviors;

/// <summary>
/// 
/// </summary>
public partial class TouchBehavior : PlatformBehavior<VisualElement>
{
	public const string UnpressedVisualState = "Unpressed";

	public const string PressedVisualState = "Pressed";

	public const string HoveredVisualState = "Hovered";

	readonly GestureManager gestureManager = new();

	VisualElement? element;

	internal VisualElement? Element
	{
		get => element;
		set
		{
			if (element != null)
			{
				IsUsed = false;
				gestureManager.Reset();
				SetChildrenInputTransparent(false);
			}
			gestureManager.AbortAnimations(this);
			element = value;
			if (value != null)
			{
				SetChildrenInputTransparent(ShouldMakeChildrenInputTransparent);
				IsUsed = true;
				ForceUpdateState();
			}
		}
	}

	readonly WeakEventManager weakEventManager = new();

	internal bool IsDisabled { get; set; }

	internal bool IsUsed { get; set; }

	internal bool IsAutoGenerated { get; set; }


	public event EventHandler<TouchStatusChangedEventArgs> StatusChanged
	{
		add => weakEventManager.AddEventHandler(value);
		remove => weakEventManager.RemoveEventHandler(value);
	}

	public event EventHandler<TouchStateChangedEventArgs> StateChanged
	{
		add => weakEventManager.AddEventHandler(value);
		remove => weakEventManager.RemoveEventHandler(value);
	}

	public event EventHandler<TouchInteractionStatusChangedEventArgs> InteractionStatusChanged
	{
		add => weakEventManager.AddEventHandler(value);
		remove => weakEventManager.RemoveEventHandler(value);
	}

	public event EventHandler<HoverStatusChangedEventArgs> HoverStatusChanged
	{
		add => weakEventManager.AddEventHandler(value);
		remove => weakEventManager.RemoveEventHandler(value);
	}

	public event EventHandler<HoverStateChangedEventArgs> HoverStateChanged
	{
		add => weakEventManager.AddEventHandler(value);
		remove => weakEventManager.RemoveEventHandler(value);
	}

	public event EventHandler<TouchCompletedEventArgs> Completed
	{
		add => weakEventManager.AddEventHandler(value);
		remove => weakEventManager.RemoveEventHandler(value);
	}

	public event EventHandler<LongPressCompletedEventArgs> LongPressCompleted
	{
		add => weakEventManager.AddEventHandler(value);
		remove => weakEventManager.RemoveEventHandler(value);
	}

	public static readonly BindableProperty IsAvailableProperty = BindableProperty.Create(
		nameof(IsAvailable),
		typeof(bool),
		typeof(TouchBehavior),
		true);

	public bool IsAvailable
	{
		get => (bool)GetValue(IsAvailableProperty);
		set => SetValue(IsAvailableProperty, value);
	}

	public static readonly BindableProperty ShouldMakeChildrenInputTransparentProperty = BindableProperty.Create(
		nameof(ShouldMakeChildrenInputTransparent),
		typeof(bool),
		typeof(TouchBehavior),
		true);

	public bool ShouldMakeChildrenInputTransparent
	{
		get => (bool)GetValue(ShouldMakeChildrenInputTransparentProperty);
		set => SetValue(ShouldMakeChildrenInputTransparentProperty, value);
	}

	public static readonly BindableProperty CommandProperty = BindableProperty.Create(
		nameof(Command),
		typeof(ICommand),
		typeof(TouchBehavior),
		default(ICommand));

	public ICommand Command
	{
		get => (ICommand)GetValue(CommandProperty);
		set => SetValue(CommandProperty, value);
	}

	public static readonly BindableProperty LongPressCommandProperty = BindableProperty.Create(
		nameof(LongPressCommand),
		typeof(ICommand),
		typeof(TouchBehavior),
		default(ICommand));

	public ICommand LongPressCommand
	{
		get => (ICommand)GetValue(LongPressCommandProperty);
		set => SetValue(LongPressCommandProperty, value);
	}

	public static readonly BindableProperty CommandParameterProperty = BindableProperty.Create(
		nameof(CommandParameter),
		typeof(object),
		typeof(TouchBehavior),
		default);

	public object CommandParameter
	{
		get => GetValue(CommandParameterProperty);
		set => SetValue(CommandParameterProperty, value);
	}

	public static readonly BindableProperty LongPressCommandParameterProperty = BindableProperty.Create(
		nameof(LongPressCommandParameter),
		typeof(object),
		typeof(TouchBehavior),
		default);

	public object LongPressCommandParameter
	{
		get => GetValue(LongPressCommandParameterProperty);
		set => SetValue(LongPressCommandParameterProperty, value);
	}

	public static readonly BindableProperty LongPressDurationProperty = BindableProperty.Create(
		nameof(LongPressDuration),
		typeof(int),
		typeof(TouchBehavior),
		500);

	public int LongPressDuration
	{
		get => (int)GetValue(LongPressDurationProperty);
		set => SetValue(LongPressDurationProperty, value);
	}

	public static readonly BindableProperty StatusProperty = BindableProperty.Create(
		nameof(Status),
		typeof(TouchStatus),
		typeof(TouchBehavior),
		TouchStatus.Completed,
		BindingMode.OneWayToSource);

	public TouchStatus Status
	{
		get => (TouchStatus)GetValue(StatusProperty);
		set => SetValue(StatusProperty, value);
	}

	public static readonly BindableProperty StateProperty = BindableProperty.Create(
		nameof(State),
		typeof(TouchState),
		typeof(TouchBehavior),
		TouchState.Normal,
		BindingMode.OneWayToSource);

	public TouchState State
	{
		get => (TouchState)GetValue(StateProperty);
		set => SetValue(StateProperty, value);
	}

	public static readonly BindableProperty InteractionStatusProperty = BindableProperty.Create(
		nameof(InteractionStatus),
		typeof(TouchInteractionStatus),
		typeof(TouchBehavior),
		TouchInteractionStatus.Completed,
		BindingMode.OneWayToSource);

	public TouchInteractionStatus InteractionStatus
	{
		get => (TouchInteractionStatus)GetValue(InteractionStatusProperty);
		set => SetValue(InteractionStatusProperty, value);
	}

	public static readonly BindableProperty HoverStatusProperty = BindableProperty.Create(
		nameof(Behaviors.HoverStatus),
		typeof(HoverStatus),
		typeof(TouchBehavior),
		HoverStatus.Exited,
		BindingMode.OneWayToSource);

	public HoverStatus HoverStatus
	{
		get => (HoverStatus)GetValue(HoverStateProperty);
		set => SetValue(HoverStateProperty, value);
	}

	public static readonly BindableProperty HoverStateProperty = BindableProperty.Create(
		nameof(Behaviors.HoverState),
		typeof(HoverState),
		typeof(TouchBehavior),
		HoverState.Normal,
		BindingMode.OneWayToSource);

	public HoverState HoverState
	{
		get => (HoverState)GetValue(HoverStateProperty);
		set => SetValue(HoverStateProperty, value);
	}

	public static readonly BindableProperty NormalBackgroundColorProperty = BindableProperty.Create(
		nameof(NormalBackgroundColor),
		typeof(Color),
		typeof(TouchBehavior),
		Colors.Transparent);

	public Color NormalBackgroundColor
	{
		get => (Color)GetValue(NormalBackgroundColorProperty);
		set => SetValue(NormalBackgroundColorProperty, value);
	}

	public static readonly BindableProperty HoveredBackgroundColorProperty = BindableProperty.Create(
		nameof(HoveredBackgroundColor),
		typeof(Color),
		typeof(TouchBehavior),
		Colors.Transparent);

	public Color HoveredBackgroundColor
	{
		get => (Color)GetValue(HoveredBackgroundColorProperty);
		set => SetValue(HoveredBackgroundColorProperty, value);
	}

	public static readonly BindableProperty PressedBackgroundColorProperty = BindableProperty.Create(
		nameof(PressedBackgroundColor),
		typeof(Color),
		typeof(TouchBehavior),
		Colors.Transparent);

	public Color PressedBackgroundColor
	{
		get => (Color)GetValue(PressedBackgroundColorProperty);
		set => SetValue(PressedBackgroundColorProperty, value);
	}

	public static readonly BindableProperty NormalOpacityProperty = BindableProperty.Create(
		nameof(NormalOpacity),
		typeof(double),
		typeof(TouchBehavior),
		1.0);

	public double NormalOpacity
	{
		get => (double)GetValue(NormalOpacityProperty);
		set => SetValue(NormalOpacityProperty, value);
	}

	public static readonly BindableProperty HoveredOpacityProperty = BindableProperty.Create(
		nameof(HoveredOpacity),
		typeof(double),
		typeof(TouchBehavior),
		1.0);

	public double HoveredOpacity
	{
		get => (double)GetValue(HoveredOpacityProperty);
		set => SetValue(HoveredOpacityProperty, value);
	}

	public static readonly BindableProperty PressedOpacityProperty = BindableProperty.Create(
		nameof(PressedOpacity),
		typeof(double),
		typeof(TouchBehavior),
		1.0);

	public double PressedOpacity
	{
		get => (double)GetValue(PressedOpacityProperty);
		set => SetValue(PressedOpacityProperty, value);
	}

	internal bool CanExecute => IsAvailable
			&& (element?.IsEnabled ?? false)
			&& (Command?.CanExecute(CommandParameter) ?? true);

	public static readonly BindableProperty NormalScaleProperty = BindableProperty.Create(
		nameof(NormalScale),
		typeof(double),
		typeof(TouchBehavior),
		1.0);

	public double NormalScale
	{
		get => (double)GetValue(NormalScaleProperty);
		set => SetValue(NormalScaleProperty, value);
	}

	public static readonly BindableProperty HoveredScaleProperty = BindableProperty.Create(
		nameof(HoveredScale),
		typeof(double),
		typeof(TouchBehavior),
		1.0);

	public double HoveredScale
	{
		get => (double)GetValue(HoveredScaleProperty);
		set => SetValue(HoveredScaleProperty, value);
	}

	public static readonly BindableProperty PressedScaleProperty = BindableProperty.Create(
		nameof(PressedScale),
		typeof(double),
		typeof(TouchBehavior),
		1.0);

	public double PressedScale
	{
		get => (double)GetValue(PressedScaleProperty);
		set => SetValue(PressedScaleProperty, value);
	}

	public static readonly BindableProperty NormalTranslationXProperty = BindableProperty.Create(
		nameof(NormalTranslationX),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double NormalTranslationX
	{
		get => (double)GetValue(NormalTranslationXProperty);
		set => SetValue(NormalTranslationXProperty, value);
	}

	public static readonly BindableProperty HoveredTranslationXProperty = BindableProperty.Create(
		nameof(HoveredTranslationX),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double HoveredTranslationX
	{
		get => (double)GetValue(HoveredTranslationXProperty); set => SetValue(HoveredTranslationXProperty, value);
	}

	public static readonly BindableProperty PressedTranslationXProperty = BindableProperty.Create(
		nameof(PressedTranslationX),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double PressedTranslationX
	{
		get => (double)GetValue(PressedTranslationXProperty);
		set => SetValue(PressedTranslationXProperty, value);
	}

	public static readonly BindableProperty NormalTranslationYProperty = BindableProperty.Create(
		nameof(NormalTranslationY),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double NormalTranslationY
	{
		get => (double)GetValue(NormalTranslationYProperty); set => SetValue(NormalTranslationYProperty, value);
	}

	public static readonly BindableProperty HoveredTranslationYProperty = BindableProperty.Create(
		nameof(HoveredTranslationY),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double HoveredTranslationY
	{
		get => (double)GetValue(HoveredTranslationYProperty); set => SetValue(HoveredTranslationYProperty, value);
	}

	public static readonly BindableProperty PressedTranslationYProperty = BindableProperty.Create(
		nameof(PressedTranslationY),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double PressedTranslationY
	{
		get => (double)GetValue(PressedTranslationYProperty);
		set => SetValue(PressedTranslationYProperty, value);
	}

	public static readonly BindableProperty NormalRotationProperty = BindableProperty.Create(
		nameof(NormalRotation),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double NormalRotation
	{
		get => (double)GetValue(NormalRotationProperty);
		set => SetValue(NormalRotationProperty, value);
	}

	public static readonly BindableProperty HoveredRotationProperty = BindableProperty.Create(
		nameof(HoveredRotation),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double HoveredRotation
	{
		get => (double)GetValue(HoveredRotationProperty);
		set => SetValue(HoveredRotationProperty, value);
	}

	public static readonly BindableProperty PressedRotationProperty = BindableProperty.Create(
		nameof(PressedRotation),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double PressedRotation
	{
		get => (double)GetValue(PressedRotationProperty); set => SetValue(PressedRotationProperty, value);
	}

	public static readonly BindableProperty NormalRotationXProperty = BindableProperty.Create(
		nameof(NormalRotationX),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double NormalRotationX
	{
		get => (double)GetValue(NormalRotationXProperty);
		set => SetValue(NormalRotationXProperty, value);
	}

	public static readonly BindableProperty HoveredRotationXProperty = BindableProperty.Create(
		nameof(HoveredRotationX),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double HoveredRotationX
	{
		get => (double)GetValue(HoveredRotationXProperty);
		set => SetValue(HoveredRotationXProperty, value);
	}

	public static readonly BindableProperty PressedRotationXProperty = BindableProperty.Create(
		nameof(PressedRotationX),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double PressedRotationX
	{
		get => (double)GetValue(PressedRotationXProperty); set => SetValue(PressedRotationXProperty, value);
	}

	public static readonly BindableProperty NormalRotationYProperty = BindableProperty.Create(
		nameof(NormalRotationY),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double NormalRotationY
	{
		get => (double)GetValue(NormalRotationYProperty);
		set => SetValue(NormalRotationYProperty, value);
	}

	public static readonly BindableProperty HoveredRotationYProperty = BindableProperty.Create(
		nameof(HoveredRotationY),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double HoveredRotationY
	{
		get => (double)GetValue(HoveredRotationYProperty);
		set => SetValue(HoveredRotationYProperty, value);
	}

	public static readonly BindableProperty PressedRotationYProperty = BindableProperty.Create(
		nameof(PressedRotationY),
		typeof(double),
		typeof(TouchBehavior),
		0.0);

	public double PressedRotationY
	{
		get => (double)GetValue(PressedRotationYProperty);
		set => SetValue(PressedRotationYProperty, value);
	}

	public static readonly BindableProperty AnimationDurationProperty = BindableProperty.Create(
		nameof(AnimationDuration),
		typeof(int),
		typeof(TouchBehavior),
		default(int));

	public int AnimationDuration
	{
		get => (int)GetValue(AnimationDurationProperty);
		set => SetValue(AnimationDurationProperty, value);
	}

	public static readonly BindableProperty AnimationEasingProperty = BindableProperty.Create(
		nameof(AnimationEasing),
		typeof(Easing),
		typeof(TouchBehavior),
		null);

	public Easing AnimationEasing
	{
		get => (Easing)GetValue(AnimationEasingProperty);
		set => SetValue(AnimationEasingProperty, value);
	}

	public static readonly BindableProperty PressedAnimationDurationProperty = BindableProperty.Create(
		nameof(PressedAnimationDuration),
		typeof(int),
		typeof(TouchBehavior),
		default(int));

	public int PressedAnimationDuration
	{
		get => (int)GetValue(PressedAnimationDurationProperty);
		set => SetValue(PressedAnimationDurationProperty, value);
	}

	public static readonly BindableProperty PressedAnimationEasingProperty = BindableProperty.Create(
		nameof(PressedAnimationEasing),
		typeof(Easing),
		typeof(TouchBehavior),
		null);

	public Easing PressedAnimationEasing
	{
		get => (Easing)GetValue(PressedAnimationEasingProperty);
		set => SetValue(PressedAnimationEasingProperty, value);
	}

	public static readonly BindableProperty NormalAnimationDurationProperty = BindableProperty.Create(
		nameof(NormalAnimationDuration),
		typeof(int),
		typeof(TouchBehavior),
		default(int));

	public int NormalAnimationDuration
	{
		get => (int)GetValue(NormalAnimationDurationProperty);
		set => SetValue(NormalAnimationDurationProperty, value);
	}

	public static readonly BindableProperty NormalAnimationEasingProperty = BindableProperty.Create(
		nameof(NormalAnimationEasing),
		typeof(Easing),
		typeof(TouchBehavior),
		null);

	public Easing NormalAnimationEasing
	{
		get => (Easing)GetValue(NormalAnimationEasingProperty);
		set => SetValue(NormalAnimationEasingProperty, value);
	}

	public static readonly BindableProperty HoveredAnimationDurationProperty = BindableProperty.Create(
		nameof(HoveredAnimationDuration),
		typeof(int),
		typeof(TouchBehavior),
		default(int));

	public int HoveredAnimationDuration
	{
		get => (int)GetValue(HoveredAnimationDurationProperty);
		set => SetValue(HoveredAnimationDurationProperty, value);
	}

	public static readonly BindableProperty HoveredAnimationEasingProperty = BindableProperty.Create(
		nameof(HoveredAnimationEasing),
		typeof(Easing),
		typeof(TouchBehavior),
		null);

	public Easing HoveredAnimationEasing
	{
		get => (Easing)GetValue(HoveredAnimationEasingProperty);
		set => SetValue(HoveredAnimationEasingProperty, value);
	}

	public static readonly BindableProperty PulseCountProperty = BindableProperty.Create(
		nameof(PulseCount),
		typeof(int),
		typeof(TouchBehavior),
		default(int));

	public int PulseCount
	{
		get => (int)GetValue(PulseCountProperty);
		set => SetValue(PulseCountProperty, value);
	}

	public static readonly BindableProperty IsToggledProperty = BindableProperty.Create(
		nameof(IsToggled),
		typeof(bool?),
		typeof(TouchBehavior),
		default(bool?),
		BindingMode.TwoWay);

	public bool? IsToggled
	{
		get => (bool?)GetValue(IsToggledProperty);
		set => SetValue(IsToggledProperty, value);
	}

	public static readonly BindableProperty DisallowTouchThresholdProperty = BindableProperty.Create(
		nameof(DisallowTouchThreshold),
		typeof(int),
		typeof(TouchBehavior),
		default(int));

	public int DisallowTouchThreshold
	{
		get => (int)GetValue(DisallowTouchThresholdProperty);
		set => SetValue(DisallowTouchThresholdProperty, value);
	}

	public static readonly BindableProperty NativeAnimationProperty = BindableProperty.Create(
		nameof(NativeAnimation),
		typeof(bool),
		typeof(TouchBehavior),
		false);

	public bool NativeAnimation
	{
		get => (bool)GetValue(NativeAnimationProperty);
		set => SetValue(NativeAnimationProperty, value);
	}

	public static readonly BindableProperty NativeAnimationColorProperty = BindableProperty.Create(
		nameof(NativeAnimationColor),
		typeof(Color),
		typeof(TouchBehavior),
		Colors.Transparent);

	public Color NativeAnimationColor
	{
		get => (Color)GetValue(NativeAnimationColorProperty);
		set => SetValue(NativeAnimationColorProperty, value);
	}

	public static readonly BindableProperty NativeAnimationRadiusProperty = BindableProperty.Create(
		nameof(NativeAnimationRadius),
		typeof(int),
		typeof(TouchBehavior),
		-1);

	public int NativeAnimationRadius
	{
		get => (int)GetValue(NativeAnimationRadiusProperty);
		set => SetValue(NativeAnimationRadiusProperty, value);
	}

	public static readonly BindableProperty NativeAnimationShadowRadiusProperty = BindableProperty.Create(
		nameof(NativeAnimationShadowRadius),
		typeof(int),
		typeof(TouchBehavior),
		-1);

	public int NativeAnimationShadowRadius
	{
		get => (int)GetValue(NativeAnimationShadowRadiusProperty);
		set => SetValue(NativeAnimationShadowRadiusProperty, value);
	}

	public static readonly BindableProperty NativeAnimationBorderlessProperty = BindableProperty.Create(
		nameof(NativeAnimationBorderless),
		typeof(bool),
		typeof(TouchBehavior),
		false);

	public bool NativeAnimationBorderless
	{
		get => (bool)GetValue(NativeAnimationBorderlessProperty);
		set => SetValue(NativeAnimationBorderlessProperty, value);
	}

	public static readonly BindableProperty NormalBackgroundImageSourceProperty = BindableProperty.Create(
		nameof(NormalBackgroundImageSource),
		typeof(ImageSource),
		typeof(TouchBehavior),
		default(ImageSource));

	public ImageSource NormalBackgroundImageSource
	{
		get => (ImageSource)GetValue(NormalBackgroundImageSourceProperty);
		set => SetValue(NormalBackgroundImageSourceProperty, value);
	}

	public static readonly BindableProperty HoveredBackgroundImageSourceProperty = BindableProperty.Create(
		nameof(HoveredBackgroundImageSource),
		typeof(ImageSource),
		typeof(TouchBehavior),
		default(ImageSource));

	public ImageSource HoveredBackgroundImageSource
	{
		get => (ImageSource)GetValue(HoveredBackgroundImageSourceProperty);
		set => SetValue(HoveredBackgroundImageSourceProperty, value);
	}

	public static readonly BindableProperty PressedBackgroundImageSourceProperty = BindableProperty.Create(
		nameof(PressedBackgroundImageSource),
		typeof(ImageSource),
		typeof(TouchBehavior),
		default(ImageSource));

	public ImageSource PressedBackgroundImageSource
	{
		get => (ImageSource)GetValue(PressedBackgroundImageSourceProperty);
		set => SetValue(PressedBackgroundImageSourceProperty, value);
	}

	public static readonly BindableProperty BackgroundImageAspectProperty = BindableProperty.Create(
		nameof(BackgroundImageAspect),
		typeof(Aspect),
		typeof(TouchBehavior),
		default(Aspect));

	public Aspect BackgroundImageAspect
	{
		get => (Aspect)GetValue(BackgroundImageAspectProperty);
		set => SetValue(BackgroundImageAspectProperty, value);
	}

	public static readonly BindableProperty NormalBackgroundImageAspectProperty = BindableProperty.Create(
		nameof(NormalBackgroundImageAspect),
		typeof(Aspect),
		typeof(TouchBehavior),
		default(Aspect));

	public Aspect NormalBackgroundImageAspect
	{
		get => (Aspect)GetValue(NormalBackgroundImageAspectProperty);
		set => SetValue(NormalBackgroundImageAspectProperty, value);
	}

	public static readonly BindableProperty HoveredBackgroundImageAspectProperty = BindableProperty.Create(
		nameof(HoveredBackgroundImageAspect),
		typeof(Aspect),
		typeof(TouchBehavior),
		default(Aspect));

	public Aspect HoveredBackgroundImageAspect
	{
		get => (Aspect)GetValue(HoveredBackgroundImageAspectProperty);
		set => SetValue(HoveredBackgroundImageAspectProperty, value);
	}

	public static readonly BindableProperty PressedBackgroundImageAspectProperty = BindableProperty.Create(
		nameof(PressedBackgroundImageAspect),
		typeof(Aspect),
		typeof(TouchBehavior),
		default(Aspect));

	public Aspect PressedBackgroundImageAspect
	{
		get => (Aspect)GetValue(PressedBackgroundImageAspectProperty);
		set => SetValue(PressedBackgroundImageAspectProperty, value);
	}

	public static readonly BindableProperty ShouldSetImageOnAnimationEndProperty = BindableProperty.Create(
		nameof(ShouldSetImageOnAnimationEnd),
		typeof(bool),
		typeof(TouchBehavior),
		default(bool));

	public bool ShouldSetImageOnAnimationEnd
	{
		get => (bool)GetValue(ShouldSetImageOnAnimationEndProperty);
		set => SetValue(ShouldSetImageOnAnimationEndProperty, value);
	}
}
