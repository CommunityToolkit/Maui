using System.Runtime.Versioning;
using CommunityToolkit.Maui.Core.Handlers;
using CommunityToolkit.Maui.Views;

namespace CommunityToolkit.Maui;

/// <summary>
/// This class contains MediaElement's <see cref="MauiAppBuilder"/> extensions.
/// </summary>
[SupportedOSPlatform("iOS15.0")]
[SupportedOSPlatform("MacCatalyst15.0")]
[SupportedOSPlatform("Android26.0")]
[SupportedOSPlatform("Windows10.0.17763")]
[SupportedOSPlatform("Tizen6.5")]
public static class AppBuilderExtensions
{
	/// <summary>
	/// Initializes the .NET MAUI Community Toolkit MediaElement Library
	/// </summary>
	/// <param name="builder"><see cref="MauiAppBuilder"/> generated by <see cref="MauiApp"/>.</param>
	/// <param name="mediaElementOptions"><see cref="MediaElementOptions"/> default MediaElementOptions used by constructor of <see cref="MediaElement"/>.</param>
	/// <returns><see cref="MauiAppBuilder"/> initialized for <see cref="MediaElement"/>.</returns>
	public static MauiAppBuilder UseMauiCommunityToolkitMediaElement(this MauiAppBuilder builder, MediaElementOptions? mediaElementOptions = null)
	{
		// Run universal configuration steps
		UniversalMediaElementBuilderConfig(builder);
		
		// Assign mediaElementOptions as default MediaElementOptions for MediaElement constructor if not null
		if (mediaElementOptions is not null) {
			MediaElementBuilderOptions.MediaElementOptions = mediaElementOptions;
		}

		return builder;
	}

	/// <summary>
	/// Initializes the .NET MAUI Community Toolkit MediaElement Library
	/// </summary>
	/// <param name="builder"><see cref="MauiAppBuilder"/> generated by <see cref="MauiApp"/>.</param>
	/// <param name="mediaElementOptionsAction"><see cref="MediaElementOptions"/> Action to configure default MediaElementOptions for constructor of <see cref="MediaElement"/>.</param>
	/// <returns><see cref="MauiAppBuilder"/> initialized for <see cref="MediaElement"/>.</returns>
	public static MauiAppBuilder UseMauiCommunityToolkitMediaElement(this MauiAppBuilder builder, Action<MediaElementOptions>? mediaElementOptionsAction = null) {

		// Run universal configuration steps
		UniversalMediaElementBuilderConfig(builder);

		// Update the default MediaElementOptions for MediaElement if Action is not null
		if (mediaElementOptionsAction is not null) {
			mediaElementOptionsAction.Invoke(MediaElementBuilderOptions.MediaElementOptions);
		}

		return builder;
	}

	/// <summary>
	/// Initializes the .NET MAUI Community Toolkit MediaElement Library
	/// </summary>
	/// <param name="builder"><see cref="MauiAppBuilder"/> generated by <see cref="MauiApp"/>.</param>
	/// <returns><see cref="MauiAppBuilder"/> initialized for <see cref="MediaElement"/>.</returns>
	public static MauiAppBuilder UseMauiCommunityToolkitMediaElement(this MauiAppBuilder builder) {

		// Run universal configuration steps
		UniversalMediaElementBuilderConfig(builder);

		return builder;
	}

	// Universal configuration steps that must be run in all cases of UseMauiCommunityToolkitMediaElement
	static void UniversalMediaElementBuilderConfig(MauiAppBuilder builder) {
		builder.ConfigureMauiHandlers(h => {
			h.AddHandler<MediaElement, MediaElementHandler>();
		});

#if ANDROID
		builder.Services.AddSingleton<Media.Services.MediaControlsService>();
#endif
	}
}