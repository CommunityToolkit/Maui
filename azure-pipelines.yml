variables:
  CurrentSemanticVersionBase: '1.0.0'
  PreviewNumber: $[counter(variables['CurrentSemanticVersionBase'], 1001)]
  CurrentSemanticVersion: '$(CurrentSemanticVersionBase)-preview$(PreviewNumber)'
  NugetPackageVersion: '$(CurrentSemanticVersion)'
  NET_VERSION: '6.0.x'
  PathToSolution: 'src/CommunityToolkit.Maui.sln'
  PathToCommunityToolkitCsproj: 'src/CommunityToolkit.Maui/CommunityToolkit.Maui.csproj'
  PathToCommunityToolkitUnitTestCsproj: 'src/CommunityToolkit.Maui.UnitTests/CommunityToolkit.Maui.UnitTests.csproj'

trigger:
  branches:
    include:
    - main
    - develop
  tags:
    include:
    - '*'
  paths:
    exclude:
    - README.md

pr:
  autoCancel: true
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md

jobs:      
  - job: build_windows
    displayName: Build Windows Library
    pool:
      vmImage: windows-latest
    steps:
    # .NET 5.0 is required for maui-check
      - task: UseDotNet@2
        displayName: 'Install .NET 5.0 SDK'
        inputs:
          version: '5.0.x'
      - task: UseDotNet@2
        displayName: 'Install .NET SDK'
        inputs:
          version: '$(NET_VERSION)'
          includePreviewVersions: true
      - task: CmdLine@2
        displayName: 'Install .NET MAUI workload'
        inputs:
          script: 'dotnet workload install maui'
      - task: JavaToolInstaller@0
        displayName: 'Install Java SDK 11.0'
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - task: CmdLine@2
        displayName: 'Clear Local NuGet Cache' #https://github.com/actions/virtual-environments/issues/1090#issuecomment-748452120
        inputs:
          script: 'nuget locals all -clear'
      - task: CmdLine@2
        displayName: 'Clean Solution'
        inputs:
          script: 'dotnet clean $(PathToSolution)'
      # if this is a tagged build, then update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      # if this is a PR build, then update the version number
      - powershell: |
          $prNumber = $env:System_PullRequest_PullRequestNumber
          $commitId = "$(Build.SourceVersion)".Substring(0, 7)
          $fullVersionString = "$(CurrentSemanticVersionBase)-build.$prNumber+$commitId"
          Write-Host("GitHub PR = $prNumber, Commit = $commitId");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$fullVersionString")
          Write-Host "##vso[build.updatebuildnumber]$fullVersionString"
        displayName: Set NuGet Version to PR Version
        condition: and(succeeded(), eq(variables['build.reason'], 'PullRequest'))
      # restore, build and pack the packages
      - task: CmdLine@2
        displayName: 'Build Community Toolkit'
        inputs:
          script: 'dotnet build $(PathToCommunityToolkitCsproj) -c Release'
      - task: CmdLine@2
        displayName: Pack Community Toolkit NuGets
        inputs:
          script: 'dotnet pack -c Release $(PathToCommunityToolkitCsproj) -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion) --output $(Build.ArtifactStagingDirectory)/nuget -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'
      # Sign NuGet Packages
      - task: PowerShell@2
        displayName: Authenticode Sign Packages
        inputs:
          filePath: build/Sign-Package.ps1
        env:
          SignClientUser: $(SignClientUser)
          SignClientSecret: $(SignClientSecret)
          ArtifactDirectory: $(Build.ArtifactStagingDirectory)/nuget
        condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))
      # publish the packages
      - task: PublishBuildArtifacts@1
        displayName: 'Publish NuGets'
        inputs:
          artifactName: nuget
          pathToPublish: '$(Build.ArtifactStagingDirectory)/nuget'

  - job: build_macos
    displayName: Build macOS Library
    pool:
      vmImage: macos-latest
    steps:
      # if this is a tagged build, then update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      - task: UseDotNet@2
        displayName: 'Install .NET SDK'
        inputs:
          version: $(NET_VERSION)
          includePreviewVersions: true      
      - task: CmdLine@2
        displayName: 'Install .NET MAUI workload'
        inputs:
          script: 'dotnet workload install maui'
      - task: CmdLine@2
        displayName: 'Restore NuGet Packages'
        inputs:
          script: 'dotnet restore $(PathToCommunityToolkitCsproj)'
      - task: CmdLine@2
        displayName: 'Build Community Toolkit'
        inputs:
          script: 'dotnet build $(PathToCommunityToolkitCsproj) -c Release'
      # Doesn't seem to work (yet)?
      # - task: DotNetCoreCLI@2
      #   displayName: 'Run Unit Tests'
      #   inputs:
      #     command: 'test'
      #     projects: $(PathToCommunityToolkitUnitTestCsproj)
      - task: CmdLine@2
        displayName: 'Pack CommunityToolkit NuGets'
        inputs:
          script: 'dotnet pack -c Release $(PathToCommunityToolkitCsproj) -p:PackageVersion=$(NugetPackageVersion) --output $(Build.ArtifactStagingDirectory)/nuget'
