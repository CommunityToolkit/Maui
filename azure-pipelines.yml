variables:
  CurrentSemanticVersionBase: '1.0.0'
  PreviewNumber: $[counter(variables['CurrentSemanticVersionBase'], 1001)]
  CurrentSemanticVersion: '$(CurrentSemanticVersionBase)-preview$(PreviewNumber)'
  NugetPackageVersion: '$(CurrentSemanticVersion)'
  TOOLKIT_NET6_VERSION: '6.0.300'
  LATEST_NET6_VERSION: '6.0.x'
  PathToLibrarySolution: 'src/CommunityToolkit.Maui.sln'
  PathToSamplesSolution: 'samples/CommunityToolkit.Maui.Sample.sln'
  PathToCommunityToolkitCsproj: 'src/CommunityToolkit.Maui/CommunityToolkit.Maui.csproj'
  PathToCommunityToolkitCoreCsproj: 'src/CommunityToolkit.Maui.Core/CommunityToolkit.Maui.Core.csproj'
  PathToCommunityToolkitSampleCsproj: 'samples/CommunityToolkit.Maui.Sample/CommunityToolkit.Maui.Sample.csproj'
  PathToCommunityToolkitUnitTestCsproj: 'src/CommunityToolkit.Maui.UnitTests/CommunityToolkit.Maui.UnitTests.csproj'
  PathToCommunityToolkitAnalyzersCsproj: 'src/CommunityToolkit.Maui.Analyzers/CommunityToolkit.Maui.Analyzers.csproj'
  PathToCommunityToolkitSourceGeneratorsCsproj: 'src/CommunityToolkit.Maui.SourceGenerators/CommunityToolkit.Maui.SourceGenerators.csproj'
  PathToCommunityToolkitAnalyzersCodeFixCsproj: 'src/CommunityToolkit.Maui.Analyzers.CodeFixes/CommunityToolkit.Maui.Analyzers.CodeFixes.csproj'
  PathToCommunityToolkitAnalyzersUnitTestCsproj: 'src/CommunityToolkit.Maui.Analyzers.UnitTests/CommunityToolkit.Maui.Analyzers.UnitTests.csproj'
  XcodeVersion: '13.3.1'
  DotNetMauiRollbackFile: '6.0.312.json'
  ShouldCheckDependencies: true

trigger:
  branches:
    include:
    - main
    - develop
  tags:
    include:
    - '*'
  paths:
    exclude:
    - README.md

pr:
  autoCancel: 'true'
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md

jobs:      
  - job: build_windows_library
    displayName: Build Windows Library
    pool:
      vmImage: windows-latest
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET SDK $(TOOLKIT_NET6_VERSION)'
        inputs:
          packageType: 'sdk'
          version: '$(TOOLKIT_NET6_VERSION)'

      - powershell: dotnet workload install maui --from-rollback-file $(DotNetMauiRollbackFile) --source https://api.nuget.org/v3/index.json
        displayName: Install .NET MAUI $(TOOLKIT_NET6_VERSION)

      # if this is a tagged build, then update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

      # if this is a PR build, then update the version number
      - powershell: |
          $prNumber = $env:System_PullRequest_PullRequestNumber
          $commitId = "$($env:System_PullRequest_SourceCommitId)".Substring(0, 7)
          $fullVersionString = "$(CurrentSemanticVersionBase)-build-$prNumber.$(Build.BuildId)+$commitId"
          Write-Host("GitHub PR = $prNumber, Commit = $commitId");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$fullVersionString")
          Write-Host "##vso[build.updatebuildnumber]$fullVersionString"
        displayName: Set NuGet Version to PR Version
        condition: and(succeeded(), eq(variables['build.reason'], 'PullRequest'))

      # build analyzers
      - task: VSBuild@1
        displayName: 'Build CommunityToolkit.Maui.Analyzers'
        inputs:
          solution: '$(PathToCommunityToolkitAnalyzersCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore'

      - task: VSBuild@1
        displayName: 'Build CommunityToolkit.Maui.Analyzers.CodeFixes'
        inputs:
          solution: '$(PathToCommunityToolkitAnalyzersCodeFixCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore'

      - task: VSBuild@1
        displayName: 'Build CommunityToolkit.Maui.SourceGenerators'
        inputs:
          solution: '$(PathToCommunityToolkitSourceGeneratorsCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore'

      # test
      - task: DotNetCoreCLI@2
        displayName: 'Run CommunityToolkit.Maui Unit Tests'
        inputs:
          command: 'test'
          projects: '$(PathToCommunityToolkitUnitTestCsproj)'
          arguments: '--configuration Release --settings ".runsettings" --collect "XPlat code coverage" --logger trx --results-directory $(Agent.TempDirectory)'
          publishTestResults: false    

      - task: DotNetCoreCLI@2
        displayName: 'Run CommunityToolkit.Maui.Analyzers Unit Tests'
        inputs:
          command: 'test'
          projects: '$(PathToCommunityToolkitAnalyzersUnitTestCsproj)'
          arguments: '--configuration Release'
          publishTestResults: false  

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: '**/*.trx'
          searchFolder: $(Agent.TempDirectory)

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage Results'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
          failIfCoverageEmpty: true

      # pack
      - task: VSBuild@1
        displayName: 'Build and Pack CommunityToolkit.Maui.Core'
        inputs:
          solution: '$(PathToCommunityToolkitCoreCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore -t:pack -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion) -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'     
      
      - task: VSBuild@1
        displayName: 'Build and Pack CommunityToolkit.Maui'
        inputs:
          solution: '$(PathToCommunityToolkitCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore -t:pack -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion) -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'
      
      # check vulnerabilities
      - powershell: |
          dotnet list $(PathToLibrarySolution) package --vulnerable --include-transitive | findstr /S /c:"has the following vulnerable packages";
          if ($LastExitCode -ne 1)
          {
            dotnet list $(PathToLibrarySolution) package --vulnerable --include-transitive;
            exit 1;
          }

          exit 0;
        displayName: 'Check Dependencies'
        condition: eq(variables.ShouldCheckDependencies, true)
      
      # publish
      - task: PowerShell@2
        displayName: 'Copy NuGet Packages to Staging Directory'
        inputs:
          targetType: 'inline'
          script: |
            $source = ".\src"
            $filter = "nupkg"
            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Extension -match $filter } | Copy-Item -Destination "$(Build.ArtifactStagingDirectory)"
          pwsh: true
      
      # Sign NuGet Packages
      - task: PowerShell@2
        displayName: Authenticode Sign Packages
        inputs:
          filePath: build/Sign-Package.ps1
        env:
          SignClientUser: $(SignClientUser)
          SignClientSecret: $(SignClientSecret)
          ArtifactDirectory: $(Build.ArtifactStagingDirectory)
        condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))
      
      # publish the packages
      - task: PublishBuildArtifacts@1
        displayName: 'Publish NuGets'
        inputs:
          artifactName: nuget
          pathToPublish: '$(Build.ArtifactStagingDirectory)'

  - job: build_windows_sample
    displayName: Build Windows Sample App using Latest .NET SDK
    pool:
      vmImage: windows-latest
    steps:
      - task: UseDotNet@2
        displayName: 'Install Latest .NET SDK'
        inputs:
          packageType: 'sdk'
          version: '$(LATEST_NET6_VERSION)'

      - powershell: dotnet workload install maui
        displayName: Install Latest .NET MAUI Workload

      # build sample
      - task: VSBuild@1
        displayName: 'Build Community Toolkit Sample'
        inputs:
          solution: '$(PathToCommunityToolkitSampleCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore'

  - job: verify_formatting_windows
    displayName: Verify Code Formatting on Windows
    pool:
      vmImage: windows-latest
    steps:
      - task: UseDotNet@2
        displayName: 'Install Latest .NET SDK'
        inputs:
          packageType: 'sdk'
          version: '$(LATEST_NET6_VERSION)'

      - powershell: dotnet workload install maui
        displayName: Install Latest .NET MAUI Workload

      - task: Bash@3
        displayName: 'Verify Formatting'
        env:
          PathToSamplesSolution: $(PathToSamplesSolution)
        inputs:
          targetType: 'inline'
          script: |
            dotnet format $PathToSamplesSolution --verify-no-changes --exclude-diagnostics CA1416
            status=$?
            [ $status -eq 0 ] && echo "No errors found"
            [ $status -ne 0 ] && echo "Formatting errors found. In the command line, please run \`dotnet format $PathToSamplesSolution\`, then commit + push the newly formatted code"
            exit $status

  - job: build_macos_library
    displayName: Build macOS Library
    pool:
      vmImage: macos-12
    steps:
      # if this is a tagged build, then update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

      - task: CmdLine@2
        displayName: 'Set Xcode Version'
        inputs:
          script: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XcodeVersion).app;sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app/Contents/Developer
     
      - task: UseDotNet@2
        displayName: Install .NET $(TOOLKIT_NET6_VERSION)
        inputs:
          packageType: 'sdk'
          version: '$(TOOLKIT_NET6_VERSION)'

      - task: CmdLine@2
        displayName: 'Install .NET MAUI Workload $(TOOLKIT_NET6_VERSION)'
        inputs:
          script: dotnet workload install maui --from-rollback-file $(DotNetMauiRollbackFile) --source https://api.nuget.org/v3/index.json

      - task: CmdLine@2
        displayName: 'Build CommunityToolkit.Maui.Analyzers'
        inputs:
          script: 'dotnet build -c Release $(PathToCommunityToolkitAnalyzersCsproj)'

      - task: CmdLine@2
        displayName: 'Build CommunityToolkit.Maui.Analyzers.CodeFixes'
        inputs:
          script: 'dotnet build -c Release $(PathToCommunityToolkitAnalyzersCodeFixCsproj)'

      - task: CmdLine@2
        displayName: 'Build CommunityToolkit.Maui.SourceGenerators'
        inputs:
          script: 'dotnet build -c Release $(PathToCommunityToolkitSourceGeneratorsCsproj)'

      - task: CmdLine@2
        displayName: 'Run CommunityToolkit.Maui.Analyzers.UnitTests'
        inputs:
          script: 'dotnet test $(PathToCommunityToolkitAnalyzersUnitTestCsproj) -c Release'

      - task: CmdLine@2
        displayName: 'Run CommunityToolkit.Maui.UnitTests'
        inputs:
          script: 'dotnet test $(PathToCommunityToolkitUnitTestCsproj) -c Release'

      - task: CmdLine@2
        displayName: 'Pack CommunityToolkit.Maui.Core NuGet'
        inputs:
          script: 'dotnet pack $(PathToCommunityToolkitCoreCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion)'

      - task: CmdLine@2
        displayName: 'Pack CommunityToolkit.Maui NuGet'
        inputs:
          script: 'dotnet pack $(PathToCommunityToolkitCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion)'

  - job: build_macos_sample
    displayName: Build macOS Sample App using Latest .NET SDK
    pool:
      vmImage: macos-12
    steps:
      - task: CmdLine@2
        displayName: 'Set Xcode Version'
        inputs:
          script: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XcodeVersion).app;sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app/Contents/Developer
      
      - task: UseDotNet@2
        displayName: Install Latest .NET SDK
        inputs:
          packageType: 'sdk'
          version: '$(LATEST_NET6_VERSION)'

      - task: CmdLine@2
        displayName: 'Install Latest .NET MAUI Workload'
        inputs:
          script: dotnet workload install maui

      - task: CmdLine@2
        displayName: 'Build Community Toolkit Sample'
        inputs:
          script: 'dotnet build $(PathToCommunityToolkitSampleCsproj) -c Release'

  - job: verify_formatting_macos
    displayName: Verify Code Formatting on macOS
    pool:
      vmImage: macos-12
    steps:
      - task: CmdLine@2
        displayName: 'Set Xcode Version'
        inputs:
          script: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XcodeVersion).app;sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app/Contents/Developer
      
      - task: UseDotNet@2
        displayName: Install Latest .NET SDK
        inputs:
          packageType: 'sdk'
          version: '$(LATEST_NET6_VERSION)'

      - task: CmdLine@2
        displayName: 'Install Latest .NET MAUI Workload'
        inputs:
          script: dotnet workload install maui

      - task: CmdLine@2
        displayName: 'Verify Formatting'
        inputs:
          script: |
            dotnet format $(PathToSamplesSolution) --verify-no-changes --exclude-diagnostics CA1416
            status=$?
            [ $status -eq 0 ] && echo "No errors found"
            [ $status -ne 0 ] && echo "Formatting errors found. In the command line, please run \`dotnet format $(PathToSamplesSolution)\`, then commit + push the newly formatted code"
            exit $status