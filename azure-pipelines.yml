variables:
  CurrentSemanticVersionBase: '1.0.0'
  PreviewNumber: $[counter(variables['CurrentSemanticVersionBase'], 1001)]
  CurrentSemanticVersion: '$(CurrentSemanticVersionBase)-preview$(PreviewNumber)'
  NugetPackageVersion: '$(CurrentSemanticVersion)'
  NET_VERSION: '6.0.x'
  PathToSolution: 'src/CommunityToolkit.Maui.sln'
  PathToCommunityToolkitCsproj: 'src/CommunityToolkit.Maui/CommunityToolkit.Maui.csproj'
  PathToCommunityToolkitCoreCsproj: 'src/CommunityToolkit.Maui.Core/CommunityToolkit.Maui.Core.csproj'
  PathToCommunityToolkitSampleCsproj: 'samples/CommunityToolkit.Maui.Sample/CommunityToolkit.Maui.Sample.csproj'
  PathToCommunityToolkitUnitTestCsproj: 'src/CommunityToolkit.Maui.UnitTests/CommunityToolkit.Maui.UnitTests.csproj'
  XcodeVersion: '13.2'

trigger:
  branches:
    include:
    - main
    - develop
  tags:
    include:
    - '*'
  paths:
    exclude:
    - README.md

pr:
  autoCancel: 'true'
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md

jobs:      
  - job: build_windows
    displayName: Build Windows Library
    pool:
      vmImage: windows-2022
    steps:
      - powershell: |
            wget https://dot.net/v1/dotnet-install.ps1 -OutFile C:\dotnet-install.ps1
            C:\dotnet-install.ps1 -Version 6.0.200-preview.22055.15
            dotnet --info
            Write-Host "##vso[task.prependpath]C:\\Users\\VssAdministrator\\AppData\\Local\\Microsoft\\dotnet"
        displayName: Install .NET 6.0.200-preview.22055.15
      - task: CmdLine@2
        displayName: 'Install .NET MAUI Workload'
        inputs:
            script : |
              dotnet --info
              dotnet workload install maui
              dotnet new globaljson --sdk-version 6.0.200-preview.22055.15 --force
      # if this is a tagged build, then update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      # if this is a PR build, then update the version number
      - powershell: |
          $prNumber = $env:System_PullRequest_PullRequestNumber
          $commitId = "$($env:System_PullRequest_SourceCommitId)".Substring(0, 7)
          $fullVersionString = "$(CurrentSemanticVersionBase)-build-$prNumber.$(Build.BuildId)+$commitId"
          Write-Host("GitHub PR = $prNumber, Commit = $commitId");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$fullVersionString")
          Write-Host "##vso[build.updatebuildnumber]$fullVersionString"
        displayName: Set NuGet Version to PR Version
        condition: and(succeeded(), eq(variables['build.reason'], 'PullRequest'))
      # build, test and pack the packages
      - task: CmdLine@2
        displayName: 'Run Unit Tests'
        inputs:
          script: 'dotnet test $(PathToCommunityToolkitUnitTestCsproj) -c Release'
      - task: VSBuild@1
        displayName: 'Build Community Toolkit Sample'
        inputs:
          solution: '$(PathToCommunityToolkitSampleCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore'
      - task: VSBuild@1
        displayName: 'Build and Pack CommunityToolkit.Maui.Core'
        inputs:
          solution: '$(PathToCommunityToolkitCoreCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore -t:pack -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion) /p:OutputPath=$(Build.ArtifactStagingDirectory)/nuget -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'     
      - task: VSBuild@1
        displayName: 'Build and Pack CommunityToolkit.Maui'
        inputs:
          solution: '$(PathToCommunityToolkitCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore -t:pack -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion) /p:OutputPath=$(Build.ArtifactStagingDirectory)/nuget -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'
      # Sign NuGet Packages
      - task: PowerShell@2
        displayName: Authenticode Sign Packages
        inputs:
          filePath: build/Sign-Package.ps1
        env:
          SignClientUser: $(SignClientUser)
          SignClientSecret: $(SignClientSecret)
          ArtifactDirectory: $(Build.ArtifactStagingDirectory)/nuget
        condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))
      # publish the packages
      - task: PublishBuildArtifacts@1
        displayName: 'Publish NuGets'
        inputs:
          artifactName: nuget
          pathToPublish: '$(Build.ArtifactStagingDirectory)/nuget'

  - job: build_macos
    displayName: Build macOS Library
    pool:
      vmImage: macos-11
    steps:
      # if this is a tagged build, then update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      - task: CmdLine@2
        displayName: 'Set Xcode Version'
        inputs:
          script: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XcodeVersion).app;sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app/Contents/Developer
      - task: CmdLine@2
        displayName: Install .NET 6.0.200-preview.22055.15
        inputs:
          script: |
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 6.0.200-preview.22055.15 --quality preview
            dotnet --info
      - task: CmdLine@2
        displayName: 'Install .NET MAUI workload'
        inputs:
          script: 'dotnet workload install maui'
      - task: CmdLine@2
        displayName: 'Run Unit Tests'
        inputs:
          script: 'dotnet test $(PathToCommunityToolkitUnitTestCsproj) -c Release'
      - task: CmdLine@2
        displayName: 'Build Community Toolkit Sample'
        inputs:
          script: 'dotnet build $(PathToCommunityToolkitSampleCsproj) -c Release'
      - task: CmdLine@2
        displayName: 'Pack CommunityToolkit.Maui.Core NuGet'
        inputs:
          script: 'dotnet pack $(PathToCommunityToolkitCoreCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion) --output $(Build.ArtifactStagingDirectory)/nuget'
      - task: CmdLine@2
        displayName: 'Pack CommunityToolkit.Maui NuGet'
        inputs:
          script: 'dotnet pack $(PathToCommunityToolkitCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion) --output $(Build.ArtifactStagingDirectory)/nuget'
